import pygame
import time

# Initialize Pygame
pygame.init()

# Set the width and height of the game window
window_width = 800
window_height = 600

# Set the colors
black = (0, 0, 0)
white = (255, 255, 255)
red = (255, 0, 0)

# Create the game window
game_display = pygame.display.set_mode((window_width, window_height))
pygame.display.set_caption('Snake Game')

# Set the game clock
clock = pygame.time.Clock()

# Set the size of the snake's segments
segment_size = 20

# Set the speed of the snake
snake_speed = 15

# Define the font for displaying the score
font = pygame.font.SysFont(None, 30)


def display_score(score):
    text = font.render("Score: " + str(score), True, white)
    game_display.blit(text, [0, 0])


def draw_snake(segment_size, snake_segments):
    for segment in snake_segments:
        pygame.draw.rect(game_display, white, [segment[0], segment[1], segment_size, segment_size])


def run_game():
    game_over = False
    game_quit = False

    # Set the initial position of the snake
    x_pos = window_width / 2
    y_pos = window_height / 2

    # Set the initial movement direction of the snake
    x_change = 0
    y_change = 0

    # Create an empty list to store the snake's segments
    snake_segments = []
    snake_length = 1

    # Generate the initial position of the food
    food_x = round((random.randint(0, window_width - segment_size)) / 20.0) * 20.0
    food_y = round((random.randint(0, window_height - segment_size)) / 20.0) * 20.0

    while not game_quit:
        while game_over:
            game_display.fill(black)
            message = "Game Over! Press C to play again or Q to quit."
            message_text = font.render(message, True, white)
            game_display.blit(message_text, [window_width / 2 - message_text.get_width() / 2,
                                             window_height / 2 - message_text.get_height() / 2])
            display_score(snake_length - 1)
            pygame.display.update()

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    game_quit = True
                    game_over = False
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_q:
                        game_quit = True
                        game_over = False
                    if event.key == pygame.K_c:
                        run_game()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                game_quit = True
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT:
                    x_change = -segment_size
                    y_change = 0
                elif event.key == pygame.K_RIGHT:
                    x_change = segment_size
                    y_change = 0
                elif event.key == pygame.K_UP:
                    y_change = -segment_size
                    x_change = 0
                elif event.key == pygame.K_DOWN:
                    y_change = segment_size
                    x_change = 0

        # Check for boundary collision
        if x_pos >= window_width or x_pos < 0 or y_pos >= window_height or y_pos < 0:
            game_over = True

        # Update the
